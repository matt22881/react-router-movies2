{"ast":null,"code":"var _jsxFileName = \"C:\\\\Lambda\\\\Projects\\\\unit-2-applied-javascript\\\\2.3-single-page-application\\\\2.3.1-react-router\\\\react-router-movies2\\\\client\\\\src\\\\Movies\\\\Movie.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nexport default function Movie(props) {\n  const [movie, setMovie] = useState(); // const History = useHistory();\n  // console.log(History)\n  // debugger\n\n  let id = 1; // Change ^^^ that line and use a hook to obtain the :id parameter from the URL\n\n  useEffect(() => {\n    axios.get(`http://localhost:5000/api/movies/${id}`) // Study this endpoint with Postman\n    .then(response => {// Study this response with a breakpoint or log statements\n      // and set the response data as the 'movie' slice of state\n    }).catch(error => {\n      console.error(error);\n    }); // This effect should run every time time\n    // the `id` changes... How could we do this?\n  }, []); // Uncomment this only when you have moved on to the stretch goals\n  // const saveMovie = evt => { }\n\n  if (!movie) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 12\n      }\n    }, \"Loading movie information...\");\n  }\n\n  const {\n    title,\n    director,\n    metascore,\n    stars\n  } = movie;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"save-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-director\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, \"Director: \", /*#__PURE__*/React.createElement(\"em\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }, director)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-metascore\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"Metascore: \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 22\n    }\n  }, metascore)), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"Actors\"), stars.map(star => /*#__PURE__*/React.createElement(\"div\", {\n    key: star,\n    className: \"movie-star\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, star))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"save-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, \"Save\"));\n}","map":{"version":3,"sources":["C:/Lambda/Projects/unit-2-applied-javascript/2.3-single-page-application/2.3.1-react-router/react-router-movies2/client/src/Movies/Movie.js"],"names":["React","useState","useEffect","axios","useHistory","useRouteMatch","Movie","props","movie","setMovie","id","get","then","response","catch","error","console","title","director","metascore","stars","map","star"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,kBAA1C;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,EAAlC,CADmC,CAGrC;AACA;AACA;;AACE,MAAIS,EAAE,GAAG,CAAT,CANmC,CAOnC;;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,KAAK,CACFQ,GADH,CACQ,oCAAmCD,EAAG,EAD9C,EACiD;AADjD,KAEGE,IAFH,CAEQC,QAAQ,IAAI,CAChB;AACA;AACD,KALH,EAMGC,KANH,CAMSC,KAAK,IAAI;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,KARH,EADc,CAUd;AACA;AACD,GAZQ,EAYN,EAZM,CAAT,CATmC,CAuBnC;AACA;;AAEA,MAAI,CAACP,KAAL,EAAY;AACV,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAP;AACD;;AAED,QAAM;AAAES,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA,SAAnB;AAA8BC,IAAAA;AAA9B,MAAwCZ,KAA9C;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKS,KAAL,CADF,eAEE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKC,QAAL,CADZ,CAFF,eAKE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASC,SAAT,CADb,CALF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF,EAUGC,KAAK,CAACC,GAAN,CAAUC,IAAI,iBACb;AAAK,IAAA,GAAG,EAAEA,IAAV;AAAgB,IAAA,SAAS,EAAC,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IADH,CADD,CAVH,CADF,eAiBE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBF,CADF;AAqBD","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\n\r\nexport default function Movie(props) {\r\n  const [movie, setMovie] = useState();\r\n\r\n// const History = useHistory();\r\n// console.log(History)\r\n// debugger\r\n  let id = 1;\r\n  // Change ^^^ that line and use a hook to obtain the :id parameter from the URL\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`http://localhost:5000/api/movies/${id}`) // Study this endpoint with Postman\r\n      .then(response => {\r\n        // Study this response with a breakpoint or log statements\r\n        // and set the response data as the 'movie' slice of state\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n    // This effect should run every time time\r\n    // the `id` changes... How could we do this?\r\n  }, []);\r\n\r\n  // Uncomment this only when you have moved on to the stretch goals\r\n  // const saveMovie = evt => { }\r\n\r\n  if (!movie) {\r\n    return <div>Loading movie information...</div>;\r\n  }\r\n\r\n  const { title, director, metascore, stars } = movie;\r\n\r\n  return (\r\n    <div className=\"save-wrapper\">\r\n      <div className=\"movie-card\">\r\n        <h2>{title}</h2>\r\n        <div className=\"movie-director\">\r\n          Director: <em>{director}</em>\r\n        </div>\r\n        <div className=\"movie-metascore\">\r\n          Metascore: <strong>{metascore}</strong>\r\n        </div>\r\n        <h3>Actors</h3>\r\n\r\n        {stars.map(star => (\r\n          <div key={star} className=\"movie-star\">\r\n            {star}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"save-button\">Save</div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}